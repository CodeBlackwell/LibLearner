#!/usr/bin/env python3

import argparse
import os
import sys
import pandas as pd
from collections import defaultdict
from pathlib import Path
from liblearner.file_processor import registry, DEFAULT_IGNORE_DIRS
from liblearner.processors import (
    PythonProcessor,
    JupyterProcessor,
    YAMLProcessor,
    MarkdownProcessor
)

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Process files of different types and extract information."
    )
    parser.add_argument(
        "input_path",
        help="Path to file or directory to process"
    )
    parser.add_argument(
        "-o", "--output",
        help="Output directory for results (default: ./extracted_<target_name>)",
        default=None
    )
    parser.add_argument(
        "--ignore-dirs",
        nargs="*",
        help=f"Additional directories to ignore (default ignored: {', '.join(sorted(DEFAULT_IGNORE_DIRS))})",
        default=[]
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Show detailed processing information"
    )
    args = parser.parse_args()
    
    # Set default output directory if not specified
    if args.output is None:
        target_name = os.path.basename(os.path.abspath(args.input_path))
        args.output = f"./extracted_{target_name}"
    
    return args

def log_error(file_path, error_message):
    """Log errors to stderr."""
    print(f"Error processing {file_path}: {error_message}", file=sys.stderr)

def show_progress(file_path, file_type=None):
    """Display progress information."""
    type_info = f" ({file_type})" if file_type else ""
    print(f"Processing {file_path}{type_info}")

def get_file_extension(file_path):
    """Get the file extension from a path."""
    return os.path.splitext(file_path)[1][1:] or "no_extension"

def get_type_name(mime_type: str) -> str:
    """Convert MIME type to a safe filename component."""
    return mime_type.replace('/', '_').replace('-', '_')

def write_dataframes_to_csv(dataframes, output_dir, base_name="results"):
    """Write DataFrames to CSV files, both combined and separate.
    
    Args:
        dataframes: Dict mapping processor types to their DataFrames
        output_dir: Directory to write CSV files
        base_name: Base name for output files
    """
    # Create combined DataFrame
    combined_df = pd.concat(dataframes.values(), ignore_index=True)
    
    # Write combined results
    combined_path = os.path.join(output_dir, f"{base_name}_combined.csv")
    combined_df.to_csv(combined_path, index=False)
    
    # Write separate results for each type
    for proc_type, df in dataframes.items():
        if not df.empty:
            type_name = get_type_name(proc_type)
            type_path = os.path.join(output_dir, f"{base_name}_{type_name}.csv")
            df.to_csv(type_path, index=False)
    
    return combined_path

def main():
    args = parse_arguments()
    
    # Create output directory if it doesn't exist
    os.makedirs(args.output, exist_ok=True)
    
    # Register available processors and set verbose mode
    registry.set_verbose(args.verbose)
    registry.register_processor(PythonProcessor())
    registry.register_processor(JupyterProcessor())
    registry.register_processor(YAMLProcessor())
    registry.register_processor(MarkdownProcessor())
    
    # Process input path
    if os.path.isdir(args.input_path):
        if args.verbose:
            print(f"Processing directory: {args.input_path}")
            
        results = registry.process_directory(args.input_path, args.ignore_dirs)
        
        # Process results by folder
        for folder, folder_results in results.items():
            if folder == '.':
                folder = os.path.basename(os.path.abspath(args.input_path))
            
            if args.verbose:
                print(f"\nProcessed folder '{folder}':")
                for result in folder_results:
                    if isinstance(result, dict):
                        show_progress(result['path'], result.get('type'))
                        if 'error' in result:
                            log_error(result['path'], result['error'])
            
            # Collect DataFrames from processors
            processor_dfs = {}
            for processor in registry._processors.values():
                if not processor.results_df.empty:
                    proc_type = processor.get_supported_types()[0]  # Use first type as identifier
                    processor_dfs[proc_type] = processor.results_df
            
            # Write results if we have any DataFrames
            if processor_dfs:
                output_path = write_dataframes_to_csv(processor_dfs, args.output, folder)
                if args.verbose:
                    print(f"Results written to: {output_path}")
    
    else:
        if args.verbose:
            print(f"Processing file: {args.input_path}")
        
        # Process single file
        result = registry.process_file(args.input_path)
        
        if result:
            if isinstance(result, dict):
                if args.verbose:
                    show_progress(result['path'], result.get('type'))
                    if 'error' in result:
                        log_error(result['path'], result['error'])
                
                # Collect DataFrames from processors
                processor_dfs = {}
                for processor in registry._processors.values():
                    if not processor.results_df.empty:
                        proc_type = processor.get_supported_types()[0]  # Use first type as identifier
                        processor_dfs[proc_type] = processor.results_df
                
                # Write results if we have any DataFrames
                if processor_dfs:
                    base_name = os.path.splitext(os.path.basename(args.input_path))[0]
                    output_path = write_dataframes_to_csv(processor_dfs, args.output, base_name)
                    if args.verbose:
                        print(f"Results written to: {output_path}")
            
            elif isinstance(result, str):
                if args.verbose:
                    print(f"Results written to: {result}")
        else:
            print(f"No processor available for file: {args.input_path}")

if __name__ == "__main__":
    main()
