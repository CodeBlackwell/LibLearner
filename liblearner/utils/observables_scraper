#!/usr/bin/env node
import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import cliProgress from 'cli-progress';
import chalk from 'chalk';
import os from 'os';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const CONFIG = {
  requestDelay: 1000,
  baseUrl: 'https://observablehq.com',
  verbose: true,
  systemDownloads: path.join(os.homedir(), 'Downloads')
};

const notebookSlugs = [
  '/@d3/zoomable-circle-packing',
];

// Function to wait for download in system Downloads folder
const waitForDownload = (timeout = 10000) => {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    const initialFiles = new Set(fs.readdirSync(CONFIG.systemDownloads));
    
    const checkDownload = () => {
      const currentFiles = new Set(fs.readdirSync(CONFIG.systemDownloads));
      const newFiles = [...currentFiles].filter(file => !initialFiles.has(file));
      
      // Look for new .tgz files
      const newDownloads = newFiles.filter(file => file.endsWith('.tgz'));
      
      if (newDownloads.length > 0) {
        resolve(newDownloads[0]); // Return the first new .tgz file
      } else if (Date.now() - startTime > timeout) {
        reject(new Error('Download timeout'));
      } else {
        setTimeout(checkDownload, 100);
      }
    };
    
    checkDownload();
  });
};

// Function to move file from Downloads to our directory
const moveDownloadedFile = (filename, targetDir) => {
  const sourcePath = path.join(CONFIG.systemDownloads, filename);
  const targetPath = path.join(targetDir, filename);
  
  fs.renameSync(sourcePath, targetPath);
  return targetPath;
};

(async () => {
  console.log(chalk.blue('üöÄ Starting ObservableHQ notebook downloader...'));
  
  const multibar = new cliProgress.MultiBar({
    clearOnComplete: false,
    hideCursor: true,
    format: '{bar} {percentage}% | {value}/{total} | {status}'
  }, cliProgress.Presets.shades_classic);

  const mainBar = multibar.create(notebookSlugs.length, 0, { status: 'Notebooks processed' });
  
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null
  });
  const page = await browser.newPage();
  
  const downloadPath = path.join(__dirname, 'observable_downloads');
  fs.mkdirSync(downloadPath, { recursive: true });
  
  console.log(chalk.yellow(`üìÅ Target directory: ${downloadPath}`));
  console.log(chalk.yellow(`üîç Monitoring downloads in: ${CONFIG.systemDownloads}`));

  for (let [index, slug] of notebookSlugs.entries()) {
    try {
      if (index > 0) {
        await new Promise(resolve => setTimeout(resolve, CONFIG.requestDelay));
      }
      
      const url = `${CONFIG.baseUrl}${slug}`;
      if (CONFIG.verbose) console.log(chalk.blue(`\nüì• Processing notebook: ${slug}`));
      
      await page.goto(url, { waitUntil: 'networkidle2' });
      const notebookTitle = await page.title();
      
      // Click the "..." menu button
      await page.waitForSelector('button[aria-haspopup="true"][class*="action-button"]');
      await page.click('button[aria-haspopup="true"][class*="action-button"]');
      
      // Wait for and click the Export option
      await page.waitForSelector('[role="menuitem"][data-valuetext="Export"]');
      await page.click('[role="menuitem"][data-valuetext="Export"]');
      
      // Wait a moment for submenu
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Now look for and click the download option in the submenu
      await page.evaluate(() => {
        const menuItems = Array.from(document.querySelectorAll('[role="menuitem"]'));
        const downloadItem = menuItems.find(item => 
          item.textContent.includes('Download zip') || 
          item.textContent.includes('Download')
        );
        if (downloadItem) downloadItem.click();
      });
      
      console.log(chalk.yellow('‚è≥ Waiting for download to complete...'));
      const downloadedFile = await waitForDownload();
      
      // Move the file to our target directory
      const finalPath = moveDownloadedFile(downloadedFile, downloadPath);
      
      console.log(chalk.green(`‚úÖ Successfully downloaded: ${notebookTitle}`));
      console.log(chalk.blue(`üì¶ Saved to: ${finalPath}`));
      mainBar.increment();
    } catch (error) {
      console.error(chalk.red(`‚ùå Failed to download ${slug}:`), error);
      mainBar.increment({ status: 'Error occurred' });
    }
  }

  multibar.stop();
  console.log(chalk.green('\nüéâ Downloads completed!'));
  await browser.close();
})();
